#!/usr/bin/env bash
set -Eeu -o pipefail

# Look through the local filesystem and exclude development dependencies
# from Apple Time Machine backups.
#
# Since these files can be restored easily via their respective installation
# tools, there's no reason to waste time/bandwidth on backing them up.
#
# To retrieve a full list of excluded files, you may run:
#
#   sudo mdfind "com_apple_backup_excludeItem = 'com.apple.backupd'"
#
# For a full explanation, please see https://apple.stackexchange.com/a/25833/206772
#
# @version 0.3.0
# @author  Steve Grunwell
# @license MIT

readonly ASIMOV_ROOT=~

# Paths to unconditionally skip over. This prevents Asimov from modifying the
# Time Machine exclusions for these paths (and decendents). It has an important
# side-effect of speeding up the search.
readonly ASIMOV_SKIP_PATHS=(
    ~/.Trash
    ~/Library
)

# Debug function to print messages only when DEBUG env var is set
debug_echo() {
    if [[ -n "${DEBUG:-}" ]]; then
        echo "$@"
    fi
}

# Get the config directory path, using XDG_CONFIG_HOME or ~/.config as fallback
get_config_dir() {
    if [[ -n "${XDG_CONFIG_HOME:-}" ]]; then
        echo "${XDG_CONFIG_HOME}/asimov"
    else
        echo "${HOME}/.config/asimov"
    fi
}

# Initialize the default config file if it doesn't exist
init_config_file() {
    local config_dir="$(get_config_dir)"
    local config_file="${config_dir}/dirs.txt"

    # Create config directory if it doesn't exist
    mkdir -p "${config_dir}"

    # Create config file with default values if it doesn't exist
    if [[ ! -f "${config_file}" ]]; then
        cat > "${config_file}" << 'EOF'
# Directory/sentinel pairs for Asimov
# Format: <directory> <sentinel_file>
# Lines starting with # are comments and will be ignored

.build Package.swift
.tox tox.ini
.nox noxfile.py
.vagrant Vagrantfile
.venv requirements.txt
venv requirements.txt
.venv pyproject.toml
Pods Podfile
build setup.py
dist setup.py
.next next.config.js
target Cargo.toml
vendor Gemfile
vendor go.mod
venv requirements.txt

# Commented out entries (uncomment to enable):
# .gradle build.gradle
# .gradle build.gradle.kts
# build build.gradle
# build build.gradle.kts
# .dart_tool pubspec.yaml
# .packages pubspec.yaml
# .stack-work stack.yaml
# Carthage Cartfile
# bower_components bower.json
# build pubspec.yaml
# node_modules package.json
# .parcel-cache package.json
# target pom.xml
# target build.sbt
# target plugins.sbt
# vendor composer.json
# deps mix.exs
# .build mix.exs
# .terraform.d .terraformrc
# .terragrunt-cache terragrunt.hcl
# cdk.out cdk.json
EOF
        echo "Created default config file at ${config_file}"
    fi
}

# Read and parse the config file to get directory/sentinel pairs
read_config_file() {
    local config_file="$(get_config_dir)/dirs.txt"
    declare -a config_pairs=()

    # Read file line by line, skip comments and empty lines
    while IFS= read -r line; do
        # Skip empty lines and comments
        [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue

        # Add non-comment lines to array
        config_pairs+=("$line")
    done < "$config_file"

    # Output the array elements
    printf '%s\n' "${config_pairs[@]}"
}

# Initialize config file and read directory/sentinel pairs from it
init_config_file

# Read directory/sentinel pairs from config file (cross-platform approach)
declare -a ASIMOV_VENDOR_DIR_SENTINELS=()
while IFS= read -r line; do
    ASIMOV_VENDOR_DIR_SENTINELS+=("$line")
done < <(read_config_file)

echo "${#ASIMOV_VENDOR_DIR_SENTINELS[@]} rules loaded"

# Exclude the given paths from Time Machine backups.
# Reads the newline-separated list of paths from stdin.
exclude_file() {
    local path
    while IFS=$'\n' read -r path; do
        debug_echo "Handling path: ${path}"
        if tmutil isexcluded "${path}" | grep -Fq '[Excluded]'; then
            echo "- ${path} is already excluded, skipping."
            continue
        fi

        # Some dir may cause error with tmutil:
        # /Users/reorx/Code/go/pkg/mod/golang.org/toolchain@v0.0.1-go1.23.4.darwin-arm64/src/cmd/vendor: Error (-50) while attempting to change exclusion setting.
        # by checking the dir's attributes:
        # $ /bin/ls -l /Users/reorx/Code/go/pkg/mod/golang.org/
        # total 0
        # dr-xr-xr-x@ 14 reorx  staff  448 Jan  2 14:14 toolchain@v0.0.1-go1.23.4.darwin-arm64
        # drwxr-xr-x  22 reorx  staff  704 Jan  2 14:24 x
        # we can see that it does not have write permission.
        # so we assume that tmutil cannot add dirs without write permission,
        # here we skip those dirs to prevent the error
        if [ ! -w "${path}" ]; then
          echo "Warn: skip not writable path ${path}"
          continue
        fi

        tmutil addexclusion "${path}"

        sizeondisk=$(du -hs "${path}" | cut -f1)
        echo "- ${path} has been excluded from Time Machine backups (${sizeondisk})."
    done
}


# Iterate over the skip directories to construct the `find` expression.
declare -a find_parameters_skip=()
for d in "${ASIMOV_SKIP_PATHS[@]}"; do
    find_parameters_skip+=( -not \( -path "${d}" -prune \) )
done

# Iterate over the directory/sentinel pairs to construct the `find` expression.
declare -a find_parameters_vendor=()
for i in "${ASIMOV_VENDOR_DIR_SENTINELS[@]}"; do
    read -ra parts <<< "${i}"

    # Add this folder to the `find` list, allowing a single `find` command to find all
    _exclude_name="${parts[0]}"
    _sibling_sentinel_name="${parts[1]}"

    # Given a directory path, determine if the corresponding file (relative
    # to that directory) is available.
    #
    # For example, when looking at a /vendor directory, we may choose to
    # ensure a composer.json file is available.
    find_parameters_vendor+=( -or \( \
        -type d \
        -name "${_exclude_name}" \
        -execdir test -e "${_sibling_sentinel_name}" \; \
        -prune \
        -print \
    \) )
done


printf '\n\033[0;36mFinding dependency directories with corresponding definition filesâ€¦\033[0m\n'
debug_echo "${find_parameters_skip[@]}"
debug_echo "${find_parameters_vendor[@]}"
find "${ASIMOV_ROOT}" \( "${find_parameters_skip[@]}" \) \( -false "${find_parameters_vendor[@]}" \) | exclude_file
